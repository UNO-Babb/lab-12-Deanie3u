Name:

Number of elements: 10,000

Bubble Sort
Sorted: 2.54 seconds
Reversed: 5.68 seconds
Random: 4.52 seconds

Bubble Sort Early Exit
Sorted: 0.00054 seconds
Reversed: 5.86333 seconds
Random: 4.54198 seconds

Selection Sort: 10,000
Sorted: 1.82 seconds
Reversed: 1.99 seconds
Random:2.07 seconds

Insertion Sort: 20,000
Sorted: 0.00181 seconds
Reversed: 14.89981 seconds
Random: 8.34767 seconds

Merge Sort: 20,000
Sorted: 0.03270 seconds
Reversed: 0.03259 seconds
Random: 0.04483 seconds

Questions to answer:
1) What was the worst case scenario for any sorting technique?
- Insertion sort was the worst for sorting technique, it took 14.89 seconds.

2) The first 3 sorts have the same runtime of O(n^2). Why were the times different? Why would one be more efficient than the others?
- Bubble Sort is slow because it keeps comparing and swapping numbers many times.
-Bubble Sort Early Exit is faster when the list is already sorted. it can stop early and save time.
-Selection Sort is a little better because it does only one swap in each pass, even though it still compares many numbers.

3) Why was merge sort so much more efficient?
becasue it can divides the problem into smaller parts,this let merge sort lists efficiently, and merge sort is  O(n log n) algorithm. This will help Merge sort hadle a lot of data.

4) The built-in sorting technique for most programming languages is known as TimSort.
This is a merge sort until the arrays have fewer than 10 elements, then it does an insertion sort. Why would this be useful?
Because Timsort is a mix of two sorting method: Merge Sort and Insertion Sort, it swich between both cases to make life easier.

5) What issues can you see with a recursive sorting technique like merge sort?
-Need a lot of memory
-Can crash with big lists
-Slow for very small lists.